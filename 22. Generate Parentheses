Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

Algorithm:

Step 1: Initialize empty list and call the backtracking method.
Step 2: Back track method: (List,current_string,open,close,n)
            if( current_string == 2 * n) liast.add(current_string)
            if( open < n) then (  can be added. So add ( to current_string, call backtracking method(increment open), Remove last character from current_string
            if( close < n) then ) can be added. So add ) to current_string, call backtracking menthod(increment close), Remove last character from current_string
Step 3: Return list.

Code:

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        backTracking(ans, new StringBuilder(),0,0,n);
        return ans;
        
    }


    public void backTracking(List<String> ans, StringBuilder cur, int open,int close,int max)
    {
        if(cur.length() == max * 2)
        {
            ans.add(cur.toString());
            return;
        }

        if( open < max)
        {
            cur.append("(");
            backTracking(ans,cur,open+1, close, max);
            cur.deleteCharAt(cur.length()-1);
        }
        if(close < open)
        {
            cur.append(")");
            backTracking(ans,cur,open, close+1, max);
            cur.deleteCharAt(cur.length()-1);
        }



    }
}
