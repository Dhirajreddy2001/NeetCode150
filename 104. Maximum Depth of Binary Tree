Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Solution: We can solve this problem with recursion, iterative DFS approach using stack and BFS using queue.

Algorithm(using recursion DFS):
Step 1: check if root is null if yes return 0
Step 2: else :
                initialize left_max and right_max variables
                left_max will pass through left child to get max depth
                right_max will pass through right child to get max depth
                finally return max_depth where max_depth  = Max(Left_max, Right_max) + 1


Code:
public int maxDepth(TreeNode root) {

        if(root == null)
        {
            return 0;
        }
        else{
            int l_max = maxDepth(root.left);
            int r_max = maxDepth(root.right);
            return Math.max(l_max,r_max) + 1;
        }
        
    }
}
 ----------------------- Iterative DFS with stack -----------------------------

public int maxDepth(TreeNode root) {
    if (root == null) return 0;

    Stack<Pair<TreeNode, Integer>> stack = new Stack<>();
    stack.push(new Pair<>(root, 1));

    int maxDepth = 0;

    while (!stack.isEmpty()) {
        Pair<TreeNode, Integer> current = stack.pop();
        TreeNode node = current.getKey();
        int depth = current.getValue();
        maxDepth = Math.max(maxDepth, depth);

        if (node.left != null) {
            stack.push(new Pair<>(node.left, depth + 1));
        }
        if (node.right != null) {
            stack.push(new Pair<>(node.right, depth + 1));
        }
    }

    return maxDepth;
}
