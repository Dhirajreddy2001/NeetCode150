You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].

ALgorithm:
Step 1: check if the input string is not empty if no return 0;
Step 2: Initialize a stack to store the result or value from the string.
Step 3: Start looping through the array os strings
Step 4: For every token[i] hceck if it is a operator : if yes pop top 2 elemts of the satck and perform that operation tha then push the result on to the stack.
Step 5: If token[i] is not a operator push that element on to the stack. Continue this loop until end of the array is reached.
Step 6: return top most element of the stack which is the result.
code:
class Solution {
    public int evalRPN(String[] tokens) {
            Stack<Integer> stack = new Stack<>();
            if(tokens.length == 0) return 0;

            for(int i =0;i < tokens.length; i++)
            {
                if(IsOperator(tokens[i]))
                {
                    int a = stack.pop();
                    int b = stack.pop();
                    int res = Operation(b,a,tokens[i].charAt(0));
                    stack.push(res);
                }
                else
                {
                    stack.push(Integer.parseInt(tokens[i]));
                }
            }

            return stack.pop();
    }

    private boolean IsOperator(String c)
    {
        if(c.equals("+") || c.equals("-") || c.equals("/") || c.equals("*"))
        {
            return true;
        }
        return false;
    }

    private int Operation(int a, int b, char op)
    {
        switch(op){
            case '+': return a + b;
            case '-': return a - b;
            case '/' : return (int)(a / b);
            case '*' : return (int)(a * b); 
            default : return 0;
        }

    }

  
}
