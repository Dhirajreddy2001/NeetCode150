Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

This problem can be solved in 3 ways :
a). Bruteforce
b). HashSet
c). Two Pointer ( refer to Two Sum II)

Algorithm(using two pointers):
Apprach: Frist sort array, fix one index and  iterate through the sub array to get the sum

step 1: Sort the given input array.
step 2: Fix First number and then find the other tow numbers by using the appoach we have using in TwoSum 2 porblem using two pointers.
Step 3: Sub Method logic  
          left = i + 1
          right = array.length -1
          while(left  < right)
          {
          if(sum < 0) left ++;
          else if(sum > 0) right--;
          else{ return nums[i,left,right] & also run another while loop internally to avoid depliate values)

          }



Code:

public List<List<Integer>> threeSum(int[] nums) {
    Arrays.sort(nums);  // Step 1: Sort array to use two-pointer approach
    List<List<Integer>> result = new ArrayList<>();

    for(int i = 0; i < nums.length && nums[i] <= 0; i++) {
        if(i == 0 || nums[i] != nums[i-1]) {
            twoSum2(nums, i, result);  // Step 2: Fix one number, find two others using two-pointer
        }
    }
    return result;
}

void twoSum2(int[] nums, int i, List<List<Integer>> result) {
    int left = i + 1;
    int right = nums.length - 1;
    
    while(left < right) {
        int sum = nums[i] + nums[left] + nums[right];

        if(sum < 0) left++;
        else if(sum > 0) right--;
        else {
            result.add(Arrays.asList(nums[i], nums[left++], nums[right--]));
            
            // Skip duplicates for second number
            while(left < right && nums[left] == nums[left - 1]) {
                left++;
            }
        }
    }
}
