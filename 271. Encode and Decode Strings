Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:

string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:

string encoded_string = encode(strs);
and Machine 2 does:

vector<string> strs2 = decode(encoded_string);
strs2 in Machine 2 should be the same as strs in Machine 1.

Implement the encode and decode methods.

You are not allowed to solve the problem using any serialize methods (such as eval).

 

Example 1:

Input: dummy_input = ["Hello","World"]
Output: ["Hello","World"]
Explanation:
Machine 1:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 1 ---msg---> Machine 2

Machine 2:
Codec decoder = new Codec();
String[] strs = decoder.decode(msg);
Example 2:

Input: dummy_input = [""]
Output: [""]
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] contains any possible characters out of 256 valid ASCII characters.

Conditions to consider:
-> strs[i] can be any character from 0-256
-> Using a sentinal value as return value in case of an empty input array.

Solution Apprach:

Encoder side:
Consider an special character which can be used as delimiter in the array.
Append this delimiter to the array to create separations in the array while appending it to the encoded string.

Decoder side:

Use this special character to split the encoded string into individual words of the message.


Code:

Codec {

    // Encodes a list of strings to a single string.
    public String encode(List<String> strs) {

        if(strs.size() == 0)
        {
            return Character.toString((char)258);
        }

        String separator = Character.toString((char)257);
        StringBuilder sb = new StringBuilder();

        for(String s : strs)
        {
            sb.append(s);
            sb.append(separator);
        }

        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();


        
    }

    // Decodes a single string to a list of strings.
    public List<String> decode(String s) {
        if(s.equals(Character.toString((char)258)))
        {
            return new ArrayList();
        }

        String separator = Character.toString((char)257);

        return Arrays.asList(s.split(separator,-1));
        
    }
}
