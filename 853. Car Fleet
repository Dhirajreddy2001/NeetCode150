There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.

You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.

A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.

A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.

If a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.

Return the number of car fleets that will arrive at the destination.

 

Example 1:

Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]

Output: 3

Explanation:

The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target.
The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Example 2:

Input: target = 10, position = [3], speed = [3]

Output: 1

Explanation:

There is only one car, hence there is only one fleet.


Explaination 

Few things to understand before solving:
A.) Once car cannot overtake another.
B.) When a car with higher speed passes one with lower speed as it cannot overtake they both travel parallely and this group of cars are called as a fleet.
C.) When such fleet is formed all the cars travel at the speed of the car which has lowest speed in the group.

And the return value is number of such fleets.

Algorithm:

Step 1: Create an 2d array to values of ( a . position of the car b. time taken by that car to reach the target i.e. value  = (target - current_position )/ speed).
Step 2: Sort this array based on distance / potition.
Step 3: Create a variable that will store return value. And another varible to store  previous car time.
Step 4: Now Start from any end and start checking if current car_time_to target is greater then the previous one if yes this will form a new fleet. Increment the count variable.
        or else this car will join the old fleet so continue.
Step 5: Return this count.

Solution with array:
class Solution {
    public int carFleet(int target, int[] position, int[] speed) {

        int n =position.length;
        double[][] cars = new double[n][2];

        for(int i =0;i < n; i++)
        {
            cars[i][0] = position[i];
            cars[i][1] = (double)(target - position[i]) / speed[i];
        }
        int count = 0;
        double prev = 0.0;
        Arrays.sort(cars, (a,b) -> Double.compare(b[0],a[0]));
        for(double[] car : cars){
            if(car[1] > prev)
            {
                count++;
                prev = car[1];
            }
        }

        return count;

        
    }
}


Solution with monotonic stack:
class Solution {
    public int carFleet(int target, int[] position, int[] speed) {

        int n =position.length;
        double[][] cars = new double[n][2];

        for(int i =0;i < n; i++)
        {
            cars[i][0] = position[i];
            cars[i][1] = (double)(target - position[i]) / speed[i];
        }
        int count = 0;
        double prev = 0.0;
        Arrays.sort(cars, (a,b) -> Double.compare(b[0],a[0]));
        Stack<Double> stack = new Stack<>();

        for (double[] car : cars) {
            double time = car[1];
            if (stack.isEmpty() || time > stack.peek()) {
                stack.push(time); 
            }
            
        }


        return stack.size();

        
    }
}
