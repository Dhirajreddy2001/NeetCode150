Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1


Algorithm:
Step 1: Initialize left = 0 and right = left + (right - left)/2;
Step 2: Start while loop  with condition left <= right
Step 3: Calculate mid = left + (right -left)/2;
        check if( nums[mid] == target if yes return mid;
        else if nums[mid] < target them left = mid +1
        else right = mid-1
Step 4: return the mid/-1

Code:
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while(right > left)
        {
           int mid = left + (right - left)/2;
           if( nums[mid] == target)
           {
            return mid;
           }  
           if(nums[mid] < target)
           {
            left = mid + 1; 
           }
           if(nums[mid] > target)
           {
            right = mid -1;
           }     
        }
        return -1;
    }
}


Few Important points on steps:
1.we are taking the search from 0 to n-1;
2. we are calculating mid as mid = left + (right - left )/2 so by doing this in binary search we are avoiding the overflow cases like if left - 1000000 and right - 2000000 then  left + right /2 = 3000000 but if we do other way it will be 2000000
3. when starting the looping we are already checking if mid == target so while assigning to left / right we do +1 for left and - 1 for right like left = mid+1 and right = mid -1 as we have already checked mid to avoind rechecking. This will also avoid entering into infinity loops.
