Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:
Input: heights = [2,4]
Output: 4

Algorithm:
Step 1: Initialize Empty stack and set max_area =0;
Step 2: startlooping in the array from 0 to n
Step 3: set current_height = heights[i]
        while(stack is not empty and current_height < heights[stack(top)])
        height = heights[stack.pop]
        width =  if stack_is_empty return 1 or else i - stack.top - 1
        area = width * height
        maxArea = max(area,maxArea)

        outside while loop:
        stack.push(i)
Step 4: return maxArea


Code:
class Solution {
    public int largestRectangleArea(int[] heights) {

       
        int maxArea = 0;
        int len = heights.length;
        Stack<Integer> stack =new Stack<>();
        
        for (int i = 0; i <= len; i++) {
            int currHeight = (i == len) ? 0 : heights[i];

            while (!stack.isEmpty() && currHeight < heights[stack.peek()]) {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                int area = height * width;
                maxArea = Math.max(maxArea, area);
            }

            stack.push(i);
        }

        return maxArea;
    }
}
