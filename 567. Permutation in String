Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Algorithm:

Step 1: Create two arrays of length 26 to map the characters of te strings.
Step 2: Start adding the character counts of string 1 and characters counts of size of string 1 from string 2.
Step 3: Start check checking is the character count arrays match if yes return true
Step 4: else move the window on the second string by one character and keep on checking if the arrays character counts are same
Step finally return the result.

Code:

class Solution {
    public boolean checkInclusion(String s1, String s2) {

      int[] a1 = new int[26];
      int[] a2 = new int[26];

   for(int i=0;i < s1.length;i++)
    {
        a1[s1.chatAt(i) - 'a']++;
        a2[s2.charAt(i) - 'a']++;
      }
   for(int i =0; i < s2.length(); i++)
   {
      if(matches(a1,a2)) { return true; break; }
      a2[s2.charAt(i + s1.length() + 1) - 'a']++;
      a2[s2.charAt(i)]--;
   }

   return if(matches(a1,a2));
  }
 public boolean matches(int[] a1, int a2[])
{
   for(int i = 0;i < 26; i++)
   {
        if(a1[i] != a2[i]) return false'
  }
  return true;
}
}
}

}
