Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.


So points to remember here are :

A node can be descendent of it-self.
LCA sits between two nodes.

Solution:

if( p and q are greater then root value then LCA will be in right sub-tree or else it will be in the left sub tree. If both these conditions fail then root is the LCA.
Code: class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {

        int parentVal = root.val;
        int pVal = p.val;
        int qVal = q.val;

        if(pVal > parentVal && qVal > parentVal)
        {
             return lowestCommonAncestor(root.right,p,q);
        }
        if(pVal < parentVal && qVal < parentVal)
        {
            return lowestCommonAncestor(root.left,p,q);
        }
        else{
            return root;
        }
    }
}


Iterative solution:
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    while (root != null) {
        if (p.val < root.val && q.val < root.val) {
            root = root.left;
        } else if (p.val > root.val && q.val > root.val) {
            root = root.right;
        } else {
            return root; // split point
        }
    }
    return null;
}

General Approach :
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null || root == p || root == q)
        return root;

    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);

    if (left != null && right != null)
        return root;

    return left != null ? left : right;
}
