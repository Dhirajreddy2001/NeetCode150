Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.


Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]

Algorithm:
Step 1: Initialize and integer stack and also create an return array of size n, where n is size of the input array.
Step 2: Start an loop to loop through the array.
Step 3: For current I check if stack is ! empty, and array[i] > array[stack.pop()] then index = remove top element from the stack, ret_arr[index] = i - index
Step 4: Update top index on stack.
Step 5: return ret_array.

Code:
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {

        int n = temperatures.length;
        Stack<Integer> stack = new Stack<>();
        int[] arr = new int[n];

        for(int i=0;i < n;i++)
        {
            while(!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()])
            {
                int index = stack.pop();
                arr[index] = i - index;
            }
            stack.push(i);

        }

        return arr;
        
    }
}
