Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
Example 3:

Input: nums = [1,0,1,2]
Output: 3


Solution

Algorithm:

Step 1: Check for case where the input array is not empty, if yes return 0;
Step 2: Initialize and add the numbers from the array to the HashSet;(eliminates duplicates and need for sorting)
Step 3: Set longestSubstring length as 0;
Step 4: Start looping through the hashset to establish the consecutive sequence
Step 5: if hashset contains temp +1 then increment temp and currentstring length 
Step 6: update global string length eveytime loop is exited 
step 7; Return the global_sequence_length

Code:
public int longestConsecutive(int[] nums) {

        if (nums.length == 0) return 0;

        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }

        int longestSequence = 0;

        for (int num : set) {
            
            if (!set.contains(num - 1)) {
                int currentNum = num;
                int currentSequence = 1;

                while (set.contains(currentNum + 1)) {
                    currentNum++;
                    currentSequence++;
                }

                longestSequence = Math.max(longestSequence, currentSequence);
            }
        }

        return longestStreak;
         
    }
