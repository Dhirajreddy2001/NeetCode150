Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Explaination : we have to check heads not head values

Approaches to solve this problem 
a. Use a hashSet
b. Use two pointers   ##difference is two pointers is faster solution  as hashset takes complete n iteration where n is length of the list

a. 
Step 1: Create a hashset to store head values
step 2: start looping and check if head == null 
step 3: inside loop check if the hashset has this head if yes return true as cycle exist else keep traversing
step 4: if loop reaches null return false

b.) using 2 pointers

step 1: Check if the head == null if yes return false
step 2: initialize two pointers slow to head and fast to head.next
step 3: start looping by checking if fast  or fast.next == null
step 4:check if fast.next == null if yes return false
step 5: check if fast == slow if yes return true (verified that cycle exists)
step 6: if end of loop is reached return false;


code:

a. public class Solution {
    public boolean hasCycle(ListNode head) {

        HashSet set = new HashSet<Integer>();
        while(head != null)
        {
             if(set.contains(head)) return true;

            set.add(head);
            head = head.next;
        }
       

        return false;
        
    }
}

b.public class Solution {
    public boolean hasCycle(ListNode head) {

        if(head == null) return false;

       ListNode slow = head;
       ListNode fast = head.next;;

       while(fast != null && fast.next != null)
       {
        if(fast.next == null){ return false; }
        if(slow == fast ){ return true; }

        slow = slow.next;
        fast = fast.next.next;
       }

       return false;
        
    }

