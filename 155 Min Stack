Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


Intution : The top most record should hold the current value, mininum value of the stack and finally link to next node.
Algorithm:
Step 1:  First initialize and create node with three parameters val,min,next and set super parameters.
Step 2: push : check if head is null if yes both the parameters will be val,val, and next will be null, else: head will be val , min(val,previous min), head
Step 3: pop : head.next
Step 4: top head value
Step 5: get min : head.min vlue

# Code:
class MinStack {
    private Node head;
    public MinStack() {
        
    }
    
    public void push(int val) {
        if(head == null)
        {
            head = new Node(val,val,null);
        }
        else
        {
            head = new Node(val, Math.min(val,head.min),head);
        }
        
    }
    
    public void pop() {

       head = head.next;
        
    }
    
    public int top() {
        
       return head.val;
    }
    
    public int getMin() {
        
        return head.min;
    }

    public class Node{
        int val;
        int min;
        Node next;
        Node(int val,int min, Node next)
        {
            this.val =val;
            this.min = min;
            this.next = next;

        }
    }
}
