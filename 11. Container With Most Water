You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Eample 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1


Algorithm(by asssuming that the container is rectaingle and using two pointers):
Step 1: Set two variables left = 0 and right = inpur array length and set another variable max_area = 0.
Step 2: Start a loop with condition left < right.
Step 3: Inside the loop rectangle would have height and width. Width would be difference of left and right pointers and Height would be max of values at left index and right index.
Step 4: In every iteration area of the rectangle is calualated ( area  = height * width) and max_area is updated with maximum(area, max_area).
Step 5: Finally return max_area.
class Solution{

      public int maxArea(int[] height){

      int len = height.length;
      int left =0;
      int right = len - 1;
      int max_area = 0;

      while(left < right)
      {
      int width = right - left;
      int height = Math.min(height[left], height[right];
      int area = height * width;

      max_area = Math.max(max_area, area);

      if(height[left] < height[right]) left++;
      else if(height[left] > height[right]) right--;
      else { right--; left++;}
      }    
      }
      return max_area;
      }
