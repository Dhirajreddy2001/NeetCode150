Given the head of a linked list, remove the nth node from the end of the list and return its head.

example: 1->2->3->4->5->null n=2
          op: 1->2->3->5->null


Algorithm:
Step 1: Create a temporary List.
Step 2: this temp will point to head so temp.next=head.
Step 3: Create 2 pointers front and back that point to temp.
Step 4: Now iterate front to n+1 th position
Step 5: Now move both and front forward until front != null
Step 6: now back will point back . next will point to the node that has to ba removed so back.next will point to back.next.next
Step 7: Return temp.



Solution:
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {

        ListNode temp = new ListNode(1);

        temp.next = head;

        ListNode front = temp;
        ListNode back = temp;

        for(int i=0;i<= n; i++)
        {
            front = front.next;
           
        }
        while(front != null)
        {
            front = front.next;
            back = back.next;
        }

        back.next = back.next.next;

        return temp.next;
        
    }
}
