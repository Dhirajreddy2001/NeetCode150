You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Few things to understand:
This problem can be easily solved with binary search.
First go to a specific row check if the first element is less than target and last element is greater than target.
Now go to that specific row and then start binary search on that now in this way you can easily find the target.

Algorithm:

Step 1: Start outer loop in which i goes from 0 to m which is number of rows in the 2D Array
Step 2: Set left  = 0 and right = n - 1 which is that rows length
        first check if the first element of that ith row less then target and last element is greater than the target.
        if true : Start binary search on the i th row. and return ture if found.
        else continue
Step 3: Finally return false.

Code: 
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        for(int i = 0; i < matrix.length;i++)
        {
            int m = matrix[i].length - 1;

            if(matrix[i][0] <= target && matrix[i][m] >= target){
            int left = 0;
            int right = m;
            
            while(left <=  right)
            {    
                int mid = left + (right-left)/2;
                if( matrix[i][mid] == target) { return true; }
                else if( matrix[i][mid] > target) { right = mid-1; }
                else if(matrix[i][mid] < target) { left = mid +1; } 
            }
            }
        }

        return false;
        
    }
}


#### Issue ###
The time complexity for this solution is O( m + long[n]) which is better in some cases. But, the problem is asking for O(log(m*n)). We can do this by making the 2D matrix into 1D matrix.
Steps:
Step 1: Convert 2D array to 1D array.
Step 2: Start binary search, return true if found.
Step 3: Return false if not found.

code: 
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int m = matrix.length;
        int n = matrix[0].length;
        int[] arr = new int[m * n];
        for(int i =0; i < m; i++)
        {
            for(int j =0; j < n;j++)
            {
                arr[i * n + j] = matrix[i][j];
            }
        }
        int left = 0;
        int right = m * n - 1;

        while( left <= right)
        {
            int mid = left + (right - left) / 2;
            if(arr[mid] == target) return true;
            else if( arr[mid] < target){ left = mid + 1; }
            else if(arr[mid] >  target){ right = mid - 1;}

        }

        return false;       
    }
}

        

